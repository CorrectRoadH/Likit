// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/vote.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/CorrectRoadH/Likit/grpc/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// VoteServiceName is the fully-qualified name of the VoteService service.
	VoteServiceName = "likit.api.v1.VoteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VoteServiceVoteProcedure is the fully-qualified name of the VoteService's Vote RPC.
	VoteServiceVoteProcedure = "/likit.api.v1.VoteService/Vote"
	// VoteServiceUnVoteProcedure is the fully-qualified name of the VoteService's UnVote RPC.
	VoteServiceUnVoteProcedure = "/likit.api.v1.VoteService/UnVote"
	// VoteServiceCountProcedure is the fully-qualified name of the VoteService's Count RPC.
	VoteServiceCountProcedure = "/likit.api.v1.VoteService/Count"
	// VoteServiceIsVotedProcedure is the fully-qualified name of the VoteService's IsVoted RPC.
	VoteServiceIsVotedProcedure = "/likit.api.v1.VoteService/IsVoted"
	// VoteServiceVotedUsersProcedure is the fully-qualified name of the VoteService's VotedUsers RPC.
	VoteServiceVotedUsersProcedure = "/likit.api.v1.VoteService/VotedUsers"
)

// VoteServiceClient is a client for the likit.api.v1.VoteService service.
type VoteServiceClient interface {
	Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	UnVote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error)
	IsVoted(context.Context, *connect.Request[v1.IsVotedRequest]) (*connect.Response[v1.IsVotedResponse], error)
	VotedUsers(context.Context, *connect.Request[v1.VotedUsersRequest]) (*connect.Response[v1.VotedUsersResponse], error)
}

// NewVoteServiceClient constructs a client for the likit.api.v1.VoteService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVoteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VoteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &voteServiceClient{
		vote: connect.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+VoteServiceVoteProcedure,
			opts...,
		),
		unVote: connect.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+VoteServiceUnVoteProcedure,
			opts...,
		),
		count: connect.NewClient[v1.CountRequest, v1.CountResponse](
			httpClient,
			baseURL+VoteServiceCountProcedure,
			opts...,
		),
		isVoted: connect.NewClient[v1.IsVotedRequest, v1.IsVotedResponse](
			httpClient,
			baseURL+VoteServiceIsVotedProcedure,
			opts...,
		),
		votedUsers: connect.NewClient[v1.VotedUsersRequest, v1.VotedUsersResponse](
			httpClient,
			baseURL+VoteServiceVotedUsersProcedure,
			opts...,
		),
	}
}

// voteServiceClient implements VoteServiceClient.
type voteServiceClient struct {
	vote       *connect.Client[v1.VoteRequest, v1.VoteResponse]
	unVote     *connect.Client[v1.VoteRequest, v1.VoteResponse]
	count      *connect.Client[v1.CountRequest, v1.CountResponse]
	isVoted    *connect.Client[v1.IsVotedRequest, v1.IsVotedResponse]
	votedUsers *connect.Client[v1.VotedUsersRequest, v1.VotedUsersResponse]
}

// Vote calls likit.api.v1.VoteService.Vote.
func (c *voteServiceClient) Vote(ctx context.Context, req *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return c.vote.CallUnary(ctx, req)
}

// UnVote calls likit.api.v1.VoteService.UnVote.
func (c *voteServiceClient) UnVote(ctx context.Context, req *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return c.unVote.CallUnary(ctx, req)
}

// Count calls likit.api.v1.VoteService.Count.
func (c *voteServiceClient) Count(ctx context.Context, req *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error) {
	return c.count.CallUnary(ctx, req)
}

// IsVoted calls likit.api.v1.VoteService.IsVoted.
func (c *voteServiceClient) IsVoted(ctx context.Context, req *connect.Request[v1.IsVotedRequest]) (*connect.Response[v1.IsVotedResponse], error) {
	return c.isVoted.CallUnary(ctx, req)
}

// VotedUsers calls likit.api.v1.VoteService.VotedUsers.
func (c *voteServiceClient) VotedUsers(ctx context.Context, req *connect.Request[v1.VotedUsersRequest]) (*connect.Response[v1.VotedUsersResponse], error) {
	return c.votedUsers.CallUnary(ctx, req)
}

// VoteServiceHandler is an implementation of the likit.api.v1.VoteService service.
type VoteServiceHandler interface {
	Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	UnVote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error)
	IsVoted(context.Context, *connect.Request[v1.IsVotedRequest]) (*connect.Response[v1.IsVotedResponse], error)
	VotedUsers(context.Context, *connect.Request[v1.VotedUsersRequest]) (*connect.Response[v1.VotedUsersResponse], error)
}

// NewVoteServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVoteServiceHandler(svc VoteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	voteServiceVoteHandler := connect.NewUnaryHandler(
		VoteServiceVoteProcedure,
		svc.Vote,
		opts...,
	)
	voteServiceUnVoteHandler := connect.NewUnaryHandler(
		VoteServiceUnVoteProcedure,
		svc.UnVote,
		opts...,
	)
	voteServiceCountHandler := connect.NewUnaryHandler(
		VoteServiceCountProcedure,
		svc.Count,
		opts...,
	)
	voteServiceIsVotedHandler := connect.NewUnaryHandler(
		VoteServiceIsVotedProcedure,
		svc.IsVoted,
		opts...,
	)
	voteServiceVotedUsersHandler := connect.NewUnaryHandler(
		VoteServiceVotedUsersProcedure,
		svc.VotedUsers,
		opts...,
	)
	return "/likit.api.v1.VoteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VoteServiceVoteProcedure:
			voteServiceVoteHandler.ServeHTTP(w, r)
		case VoteServiceUnVoteProcedure:
			voteServiceUnVoteHandler.ServeHTTP(w, r)
		case VoteServiceCountProcedure:
			voteServiceCountHandler.ServeHTTP(w, r)
		case VoteServiceIsVotedProcedure:
			voteServiceIsVotedHandler.ServeHTTP(w, r)
		case VoteServiceVotedUsersProcedure:
			voteServiceVotedUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVoteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVoteServiceHandler struct{}

func (UnimplementedVoteServiceHandler) Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likit.api.v1.VoteService.Vote is not implemented"))
}

func (UnimplementedVoteServiceHandler) UnVote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likit.api.v1.VoteService.UnVote is not implemented"))
}

func (UnimplementedVoteServiceHandler) Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likit.api.v1.VoteService.Count is not implemented"))
}

func (UnimplementedVoteServiceHandler) IsVoted(context.Context, *connect.Request[v1.IsVotedRequest]) (*connect.Response[v1.IsVotedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likit.api.v1.VoteService.IsVoted is not implemented"))
}

func (UnimplementedVoteServiceHandler) VotedUsers(context.Context, *connect.Request[v1.VotedUsersRequest]) (*connect.Response[v1.VotedUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likit.api.v1.VoteService.VotedUsers is not implemented"))
}
