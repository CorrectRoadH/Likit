// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Msg message returned by server side if there is any
	Msg    *string `json:"msg,omitempty"`
	Status *string `json:"status,omitempty"`
}

// Business defines model for Business.
type Business struct {
	Config   *Config `json:"config,omitempty"`
	CreateAt *string `json:"create_at,omitempty"`
	Id       *string `json:"id,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
	UpdateAt *string `json:"update_at,omitempty"`
}

// Businesses defines model for Businesses.
type Businesses struct {
	Businesses *[]Business `json:"businesses,omitempty"`
}

// Config defines model for Config.
type Config struct {
	DataSourceConfig *[]string `json:"dataSourceConfig,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	UserName string `json:"userName"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	AccountId        *string `json:"accountId,omitempty"`
	Avatar           *string `json:"avatar,omitempty"`
	Email            *string `json:"email,omitempty"`
	Name             *string `json:"name,omitempty"`
	Permissions      *string `json:"permissions,omitempty"`
	RegistrationTime *string `json:"registrationTime,omitempty"`
}

// ResponseBusinessList defines model for ResponseBusinessList.
type ResponseBusinessList = Businesses

// ResponseInternalServerError defines model for ResponseInternalServerError.
type ResponseInternalServerError = BaseResponse

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// ResponseOK defines model for ResponseOK.
type ResponseOK = BaseResponse

// ResponseUserInfo defines model for ResponseUserInfo.
type ResponseUserInfo = UserInfo

// CreateBusinessJSONRequestBody defines body for CreateBusiness for application/json ContentType.
type CreateBusinessJSONRequestBody = Business

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Business
	// (POST /business)
	CreateBusiness(ctx echo.Context) error
	// Get Business List
	// (GET /businesses)
	GetBusinesses(ctx echo.Context) error
	// Login to Dashboard
	// (POST /user/login)
	Login(ctx echo.Context) error
	// UserInfo
	// (GET /user/userInfo)
	UserInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBusiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBusiness(ctx)
	return err
}

// GetBusinesses converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusinesses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusinesses(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// UserInfo converts echo context to params.
func (w *ServerInterfaceWrapper) UserInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/business", wrapper.CreateBusiness)
	router.GET(baseURL+"/businesses", wrapper.GetBusinesses)
	router.POST(baseURL+"/user/login", wrapper.Login)
	router.GET(baseURL+"/user/userInfo", wrapper.UserInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWUW/cRBD+K9bAo3t2kgLCb00I1akhiZLSF4SqOXvOt6296+6s07tGluABxBsvCIk3",
	"nnjNCxK/qBD+BfI69q17juqmQYoqnXT2enbmm29mv51ziFVeKEnSMETnoIkLJZnsy8nVy27JQhLzgWBT",
	"r8dKGpL2EYsiEzEaoWTwjJWs1zheUI7108ea5hDBR8E6SNB85aB1SgxVVfmQEMdaFLUniKAXsvI7KFNp",
	"SEvMTkmfkd7XWukRiGiJeZFR/ZgTM6YEEbSuvMaX1zir/LH4kalFNZTBte7bTYfKfKlKmdwU/6EyXuPg",
	"1jD3XLaGR49ur+ZviX/0yA38NZOeyrl6N4IwjlUpzTSBCDDJhQQf8AwNaohgYUzBURCkLyeYiQJXavaM",
	"YsOTWOXBK8WBzrlQ2mAW7Ap8NUe5zDE/PFHL5ZPlc5wUMgUfKEeRQQTgg8ScnEAF6VwwCyXZWdWUCjba",
	"Qn4s7IbtcDu8F27dC7e8MIzsb3wZO2IGKHS+te7sWe5RH51DoVVB2ojmpOec1n99V1et5mkypZaUeLOV",
	"x00zs0jIE3PPLEiTJ9hDuaqJacsAl3/+8frnv/7+6dfL7354ffHjP79//+8vv11eXIAPZlXUFmy0kKlN",
	"2qApuVdGIHtaNozrpFpp2MwiVnIu0rext9dYVT7EmtDQUzT92EO1GYAtkv62ttobhkaYpjXH2NoF1/R0",
	"+tXxwf7TJ0eP94c2lEVy4xxcNmmAz1nvmzCU81hVX+cCqDWummB7XYH6gRI0eKpKHdPaogu3TkpTIrgp",
	"cpSpGLOFYhN9uvPZ59dT6YY/UKmQJ/SipOYe64MokPml0mOrWjLpQ3v6R5hXtQhgciSzFURGl1S/vyiF",
	"pgSib9a+/DWKbysfXAXsg3VUbhTaVgFd49sRw41QV+roRhoyk2O5e0NVR+3YVNwbHI66auKK/b4yPjie",
	"enOlvQPxXBjoTjjYd+/B8RR8OCPNjfXZVg1JFSSxEBDBziSc7NhSm4VNKJi5kqaa5qyrbfHbm2zPSlV3",
	"upr2ITa7Klnd+kg2dK80ADz3fPdmxe0wvM59Zxc4I0Xlw/3w/vgt3bRU+fDJu8Qamhjt3VjmOerVUGqV",
	"vy5Jk11KAzV5SMZRz/fh481p964w85BMR4vXgKu5qeUqyGoxvb5hrdb+T33a0/GBXm1if0AdahPyjPK+",
	"QF7MFOrEKUTpXBKDfdrdIu9DyHquvDu0uHNw9V8AAAD//4F3UQPKDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
