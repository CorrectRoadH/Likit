// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Msg message returned by server side if there is any
	Msg    *string `json:"msg,omitempty"`
	Status *string `json:"status,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	UserName string `json:"userName"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	AccountId        *string `json:"accountId,omitempty"`
	Avatar           *string `json:"avatar,omitempty"`
	Email            *string `json:"email,omitempty"`
	Name             *string `json:"name,omitempty"`
	Permissions      *string `json:"permissions,omitempty"`
	RegistrationTime *string `json:"registrationTime,omitempty"`
}

// ResponseInternalServerError defines model for ResponseInternalServerError.
type ResponseInternalServerError = BaseResponse

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// ResponseOK defines model for ResponseOK.
type ResponseOK = BaseResponse

// ResponseUserInfo defines model for ResponseUserInfo.
type ResponseUserInfo = UserInfo

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login to Dashboard
	// (POST /user/login)
	Login(ctx echo.Context) error
	// UserInfo
	// (GET /user/userInfo)
	UserInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// UserInfo converts echo context to params.
func (w *ServerInterfaceWrapper) UserInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user/login", wrapper.Login)
	router.GET(baseURL+"/user/userInfo", wrapper.UserInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVzW7bRhB+lcW0R1qkf3rhzUZbQLAhG+7PxfBhTY6otcnd9c5SliwQaA8teuulKJBb",
	"Trn6EiBP5MR5i2CXokRGSiAnOgQQIC45+83P983MDBJVaCVRWoJ4BgZJK0noD+fzQ19aNJLnv6AZo/nJ",
	"GGXc50RJi9K6R651LhJuhZLhNSnp3uGEFzpH91ggEc8QYmigWI3FarAqAEpGWHBn/L3BIcTwXbiMLKy/",
	"UnjECZuooKqqAFKkxAjtPH8Ovrk0UPZnVcr0S+MfKMtqgK3F3IFsDE+PN4hwO/5Pj9uOfyM0fTlUzysQ",
	"TxJVSttPIQaeFkJCAHzMLTcQw8haTXEYZnc9ngvNp+rqGhNLvUQV4b2i0BSklbE8D48Evx9yOSl4MThX",
	"k8nvkxve0zKDALDgIocYIADJC2w50mgKQSSUpNZbg5kga3zIvwp/YS/ai3ai3Z1ol0VR7H+b07gozJoS",
	"tr41cL6BOqWPZ6CN0misqNuroMz9daHmUmMGbWkkpuxqyqgWM4kUmRgyO0KDTBDjcuoK09AAT69fPf77",
	"5u0//z/98dfjw9/vXv75/r8XTw8PEICdamdB1giZ+aQttyV1aAT03bJi7JI6UZmQ53hbItnVTDQnulMm",
	"7cI1TKz4LgnNwHO4gXnlqOTpqcynEFtTojvflsJgCvHFEitYRnFZBdDWcTfYllY3irbRcdt4O5JecTXX",
	"eNvTOjO5ae0+6o2Nbqz2TfvauhZaIxjHmphXv6vvw7M+GyrDTsSNsO6qsB7Yn9nhWR8CGKOh2nq860JS",
	"GiXXAmLY70W9fU+1HfmEQsd/mDt1eqZVLU/Ht8/ATyQvXqh1g2SPVDrd2nTtNMaa0VD79nVtbda9KPoU",
	"8MIubO2CKoCD6GDzK4s1VwXww3N8rVv1fqiVRcHNtEmIWcV+5DS6Utyk3qAmomx1XYZrqFi05dcUZDlu",
	"v52ydNdDPbEJ4osZlMatrdA3XOgEfVl9CAAA//8fGOdNdgkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
