// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Msg message returned by server side if there is any
	Msg    *string `json:"msg,omitempty"`
	Status *string `json:"status,omitempty"`
}

// Business defines model for Business.
type Business struct {
	Config   *Config `json:"config,omitempty"`
	CreateAt *string `json:"create_at,omitempty"`
	Id       *string `json:"id,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
	UpdateAt *string `json:"update_at,omitempty"`
}

// Businesses defines model for Businesses.
type Businesses struct {
	Businesses *[]Business `json:"businesses,omitempty"`
}

// Config defines model for Config.
type Config struct {
	DataSourceConfig *[]DatabaseConnectConfig `json:"dataSourceConfig,omitempty"`
}

// DatabaseConnectConfig defines model for DatabaseConnectConfig.
type DatabaseConnectConfig struct {
	Database     *string `json:"database,omitempty"`
	DatabaseType *string `json:"databaseType,omitempty"`
	Host         *string `json:"host,omitempty"`
	Id           *string `json:"id,omitempty"`
	Password     *string `json:"password,omitempty"`
	Port         *int    `json:"port,omitempty"`
	Title        *string `json:"title,omitempty"`
	Username     *string `json:"username,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	UserName string `json:"userName"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	AccountId        *string `json:"accountId,omitempty"`
	Avatar           *string `json:"avatar,omitempty"`
	Email            *string `json:"email,omitempty"`
	Name             *string `json:"name,omitempty"`
	Permissions      *string `json:"permissions,omitempty"`
	RegistrationTime *string `json:"registrationTime,omitempty"`
}

// ResponseBusinessList defines model for ResponseBusinessList.
type ResponseBusinessList = Businesses

// ResponseDatabaseList defines model for ResponseDatabaseList.
type ResponseDatabaseList = Config

// ResponseInternalServerError defines model for ResponseInternalServerError.
type ResponseInternalServerError = BaseResponse

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// ResponseOK defines model for ResponseOK.
type ResponseOK = BaseResponse

// ResponseUserInfo defines model for ResponseUserInfo.
type ResponseUserInfo = UserInfo

// DeleteBusinessParams defines parameters for DeleteBusiness.
type DeleteBusinessParams struct {
	// Id Business ID
	Id string `form:"id" json:"id"`
}

// DeleteDatabaseParams defines parameters for DeleteDatabase.
type DeleteDatabaseParams struct {
	// Id Database ID
	Id string `form:"id" json:"id"`
}

// CreateBusinessJSONRequestBody defines body for CreateBusiness for application/json ContentType.
type CreateBusinessJSONRequestBody = Business

// UpdateBusinessJSONRequestBody defines body for UpdateBusiness for application/json ContentType.
type UpdateBusinessJSONRequestBody = Business

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody = DatabaseConnectConfig

// UpdateDatabaseJSONRequestBody defines body for UpdateDatabase for application/json ContentType.
type UpdateDatabaseJSONRequestBody = DatabaseConnectConfig

// TestDatabaseConnectionJSONRequestBody defines body for TestDatabaseConnection for application/json ContentType.
type TestDatabaseConnectionJSONRequestBody = DatabaseConnectConfig

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete Business
	// (DELETE /business)
	DeleteBusiness(ctx echo.Context, params DeleteBusinessParams) error
	// Create Business
	// (POST /business)
	CreateBusiness(ctx echo.Context) error
	// Update Business
	// (PUT /business)
	UpdateBusiness(ctx echo.Context) error
	// Get Business List
	// (GET /businesses)
	GetBusinesses(ctx echo.Context) error
	// Delete Database
	// (DELETE /database)
	DeleteDatabase(ctx echo.Context, params DeleteDatabaseParams) error
	// Get Database Connection Configure List
	// (GET /database)
	GetDatabaseConfigureList(ctx echo.Context) error
	// Create Database
	// (POST /database)
	CreateDatabase(ctx echo.Context) error
	// Update  Database
	// (PUT /database)
	UpdateDatabase(ctx echo.Context) error
	// Test Database Connection
	// (POST /database/test)
	TestDatabaseConnection(ctx echo.Context) error
	// Login to Dashboard
	// (POST /user/login)
	Login(ctx echo.Context) error
	// UserInfo
	// (GET /user/userInfo)
	UserInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBusiness(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteBusinessParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBusiness(ctx, params)
	return err
}

// CreateBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBusiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBusiness(ctx)
	return err
}

// UpdateBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBusiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBusiness(ctx)
	return err
}

// GetBusinesses converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusinesses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusinesses(ctx)
	return err
}

// DeleteDatabase converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabase(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDatabaseParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDatabase(ctx, params)
	return err
}

// GetDatabaseConfigureList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseConfigureList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatabaseConfigureList(ctx)
	return err
}

// CreateDatabase converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDatabase(ctx)
	return err
}

// UpdateDatabase converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDatabase(ctx)
	return err
}

// TestDatabaseConnection converts echo context to params.
func (w *ServerInterfaceWrapper) TestDatabaseConnection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestDatabaseConnection(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// UserInfo converts echo context to params.
func (w *ServerInterfaceWrapper) UserInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/business", wrapper.DeleteBusiness)
	router.POST(baseURL+"/business", wrapper.CreateBusiness)
	router.PUT(baseURL+"/business", wrapper.UpdateBusiness)
	router.GET(baseURL+"/businesses", wrapper.GetBusinesses)
	router.DELETE(baseURL+"/database", wrapper.DeleteDatabase)
	router.GET(baseURL+"/database", wrapper.GetDatabaseConfigureList)
	router.POST(baseURL+"/database", wrapper.CreateDatabase)
	router.PUT(baseURL+"/database", wrapper.UpdateDatabase)
	router.POST(baseURL+"/database/test", wrapper.TestDatabaseConnection)
	router.POST(baseURL+"/user/login", wrapper.Login)
	router.GET(baseURL+"/user/userInfo", wrapper.UserInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/bxhP/KsT8/0fKpPzIg7f40UCIaxu2k0sQBCtyJG0i7tK7S8eKQaA9tOitl6JA",
	"bz316kuBfqK07rcodilSS2vl0o8ghlDAgMXl7Dx+v+HM7J5DzNOMM2RKQnQOAmXGmUTzcDh92MwlZSjl",
	"LpVKr8ecKWTmJ8myMY2JopwF7yRnek3GI0yJ/vV/gQOI4H/BzEhQvpVBpRQlFEXhQ4IyFjTTmiCChsnC",
	"r13ZJor0icR7dWWLswEd3sSNHlMoGBkfoThFsSMEFy28wTOSZmPUP1OUkgwRIqhUeaUur1RW+G1hJBIr",
	"r1wRLFRfbdrj6iues+S2/u9x5ZUK7s3nhspKcP/F/aXev9jff2EbfilR9NiA3wwgEsc8Z6qXQAQkSSkD",
	"H8gpUURABCOlMhkFwfDDChnTjEx4/x3GSq7EPA0+chmIVGZcKDIONin5OCDsLCXp3iE/O3t19p6sZGwI",
	"PmBK6BgiAB8YSdEylKFIqZSUM2mtChxSqYRx+ZiaDavhatgJu52w64VhZP7a01gD44DQelepMyWlAX10",
	"DpngGQpFy4KTyqH+11Q1TTVPoMoFw8TrTzxZJrOkCXp04KkRCvSo9AibaGAqGuDy998+/fjHnz/8fPnN",
	"d58uvv/r12///umXy4sL8EFNMi0hlaBsaIJWROWyQSOg+VrmhHVQVWmYjyIuy0nLouNDLJAofEtU07aL",
	"G4fbNGluq9ieE1RUlanZRtYs2KJHva8Pdnfevto/3nFtyLPk1jHYaKIDz37jHVWYyrbNZRYLECHIpDS2",
	"VRPUNJQQRY54LmKcSbQyV3WlLc4YxmpG7bxtt6jTFS3WhNOZAJXo8RxnAhMqXVtGXF4hasxjMjbLLVIM",
	"19cH3XAj7iTd7kZn/XHS7/SfrD7qDFaT5En/aYi41nfpyYiUH7hom7C6AjZFH609fjqTpEzhEMWC3D7U",
	"wXsV3M6clbozpu2+Cc3dLh9SdognOZbwNSm7YXTa+l5r67p6k2SfjScQKZGjfj7JqcAEotczXRbGbwof",
	"7NbVdNZqT628rVqXLXw/XWzO1LSt2ZZcYq2Zu9IOW+2Yb5W3qGqaNTpFv9nSnh30vAEX3i59T80XV6Yv",
	"mGfv2UEPfDhFIUvp0652iWfISEYhgrWVcGXNUK1GJqCgb/WiBMeojMOabxOBGUK2zXpdGPV2QVJUKCRE",
	"r88XDL5ebxt0FBDBSY5iMps1aAJ2EpZJORscrqLxxm+eLVbDcFFVreUCa/YrfFgP19tvqcfawoeNm9hy",
	"jfZmiMnTlIhJjaRn95hsWlCbkG+Zxm5BLsrascmTyb2fo1xTWOlAw9NlIcERWpY7OHhpBpMvyEHpwFJy",
	"MBda4c9qURndEB2cPEdlzXt3wePq+fyhIPMcVQ2LVzqnsbGnuuvrtDW3XFunK7n/6vTCOl1DWfgL09Ga",
	"ygd0mIvyfukuUDQuqh5YZtZJMz2EUM68OnKv8vi6nmal5+eopwvOUwsbnE3xkjU4O7RrGtxDIWTaEpaR",
	"kGloVmx2SQ9UdSh0fjbHKNUVEDVgX5gt7ZWrGiwTbYtj1PTpk3Mw1uf6xdyZY/9noqpxpeBgqLS9RHSY",
	"gDzFvW0iR31ORGIRkVv3Fc5WXV9o3AWQ2d30Ayou1l168U8AAAD//8XDXVmVGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
