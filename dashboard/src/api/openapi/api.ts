/* tslint:disable */
/* eslint-disable */
/**
 * Likit API
 * API for Likit
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * 
     * @type {string}
     * @memberof BaseResponse
     */
    'status'?: string;
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof BaseResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface Business
 */
export interface Business {
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'create_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'update_at'?: string;
    /**
     * 
     * @type {Config}
     * @memberof Business
     */
    'config'?: Config;
}
/**
 * 
 * @export
 * @interface Businesses
 */
export interface Businesses {
    /**
     * 
     * @type {Array<Business>}
     * @memberof Businesses
     */
    'businesses'?: Array<Business>;
}
/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {Array<DatabaseConnectConfig>}
     * @memberof Config
     */
    'dataSourceConfig'?: Array<DatabaseConnectConfig>;
}
/**
 * 
 * @export
 * @interface DatabaseConnectConfig
 */
export interface DatabaseConnectConfig {
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'databaseType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'host'?: string;
    /**
     * 
     * @type {number}
     * @memberof DatabaseConnectConfig
     */
    'port'?: number;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'database'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseConnectConfig
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'registrationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'permissions'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Business
         * @param {Business} [business] Create Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness: async (business?: Business, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(business, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Create Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatabase: async (databaseConnectConfig?: DatabaseConnectConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/database`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(databaseConnectConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Business
         * @param {string} id Business ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusiness: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBusiness', 'id', id)
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Database
         * @param {string} id Database ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatabase: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDatabase', 'id', id)
            const localVarPath = `/database`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Business List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinesses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Database Connection Configure List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabaseConfigureList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/database`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login to Dashboard
         * @param {LoginRequest} [loginRequest] Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test Database Connection
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Test Database Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDatabaseConnection: async (databaseConnectConfig?: DatabaseConnectConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/database/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(databaseConnectConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Business
         * @param {Business} [business] Update Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness: async (business?: Business, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(business, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update  Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Update Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatabase: async (databaseConnectConfig?: DatabaseConnectConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/database`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(databaseConnectConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/userInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Business
         * @param {Business} [business] Create Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusiness(business?: Business, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusiness(business, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createBusiness']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Create Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatabase(databaseConnectConfig, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createDatabase']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Business
         * @param {string} id Business ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusiness(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusiness(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteBusiness']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Database
         * @param {string} id Database ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatabase(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatabase(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteDatabase']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Business List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinesses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Businesses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinesses(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getBusinesses']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Database Connection Configure List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatabaseConfigureList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatabaseConfigureList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getDatabaseConfigureList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Login to Dashboard
         * @param {LoginRequest} [loginRequest] Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.login']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Test Database Connection
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Test Database Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDatabaseConnection(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testDatabaseConnection(databaseConnectConfig, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.testDatabaseConnection']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Business
         * @param {Business} [business] Update Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusiness(business?: Business, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusiness(business, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.updateBusiness']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update  Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Update Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDatabase(databaseConnectConfig, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.updateDatabase']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInfo(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.userInfo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Business
         * @param {Business} [business] Create Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness(business?: Business, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.createBusiness(business, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Create Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.createDatabase(databaseConnectConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Business
         * @param {string} id Business ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusiness(id: string, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.deleteBusiness(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Database
         * @param {string} id Database ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatabase(id: string, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.deleteDatabase(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Business List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinesses(options?: any): AxiosPromise<Businesses> {
            return localVarFp.getBusinesses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Database Connection Configure List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabaseConfigureList(options?: any): AxiosPromise<Config> {
            return localVarFp.getDatabaseConfigureList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login to Dashboard
         * @param {LoginRequest} [loginRequest] Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test Database Connection
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Test Database Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDatabaseConnection(databaseConnectConfig?: DatabaseConnectConfig, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.testDatabaseConnection(databaseConnectConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Business
         * @param {Business} [business] Update Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness(business?: Business, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.updateBusiness(business, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update  Database
         * @param {DatabaseConnectConfig} [databaseConnectConfig] Update Database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.updateDatabase(databaseConnectConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfo(options?: any): AxiosPromise<UserInfo> {
            return localVarFp.userInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Business
     * @param {Business} [business] Create Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBusiness(business?: Business, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBusiness(business, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Database
     * @param {DatabaseConnectConfig} [databaseConnectConfig] Create Database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDatabase(databaseConnectConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Business
     * @param {string} id Business ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBusiness(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBusiness(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Database
     * @param {string} id Database ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDatabase(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDatabase(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Business List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinesses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusinesses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Database Connection Configure List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDatabaseConfigureList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDatabaseConfigureList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login to Dashboard
     * @param {LoginRequest} [loginRequest] Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginRequest?: LoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test Database Connection
     * @param {DatabaseConnectConfig} [databaseConnectConfig] Test Database Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testDatabaseConnection(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testDatabaseConnection(databaseConnectConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Business
     * @param {Business} [business] Update Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBusiness(business?: Business, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBusiness(business, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update  Database
     * @param {DatabaseConnectConfig} [databaseConnectConfig] Update Database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDatabase(databaseConnectConfig?: DatabaseConnectConfig, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDatabase(databaseConnectConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInfo(options).then((request) => request(this.axios, this.basePath));
    }
}



